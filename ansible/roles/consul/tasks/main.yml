---

- name: installs 'python-consul'
  pip:
    name: python-consul

- name: installs 'pyhcl'
  pip:
    name: pyhcl

- name: creates consul config directory
  file:
    state: directory
    path: '/etc/consul'

- name: creates consul data directory
  file:
    state: directory
    path: '/var/consul'
    owner: 100
    group: 1000

- include: install.yml


- set_fact:
    cluster_ips: '{{ groups["cloud-node"] | map("extract", hostvars, ["ansible_"+advertise_interface.replace("-","_"), "ipv4", "address"]) | list }}'
  when: advertise_interface is defined

- set_fact:
    advertise_addr: '{{hostvars[inventory_hostname]["ansible_"+advertise_interface.replace("-","_")]["ipv4"]["address"]}}'
  when: advertise_interface is defined


- set_fact:
    cluster_ips: '{{ groups["cloud-node"] | map("extract", hostvars, ["ansible_default_ipv4", "address"]) | list }}'
  when: advertise_interface is undefined

- set_fact:
    advertise_addr: '{{ ansible_default_ipv4["address"] }}'
  when: advertise_interface is undefined

- set_fact:
    consul_retry_join: >
      {{ '"' + (cluster_ips | join('", "')) + '"'}}


- name: creates consul configuration file
  template:
    src: 'consul.json.j2'
    dest: "{{consul_config_file}}"
    owner: "{{consul_user}}"
    group: "{{consul_group}}"
    mode: 0755
  notify:
    - "{{ consul_restart_handler }}"

- name: allow access to consul RPC from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: tcp
    destination_port: 8300
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: allow access to Serf LAN (tcp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: tcp
    destination_port: 8301
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: allow access to Serf LAN (udp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: udp
    destination_port: 8301
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: allow access to Serf LAN (tcp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: tcp
    destination_port: 7946
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: allow access to Serf LAN (udp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: udp
    destination_port: 7946
    jump: ACCEPT
  with_items: '{{cluster_ips}}'


- name: allow access to Serf WAN (tcp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: tcp
    destination_port: 8302
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: allow access to Serf WAN (udp) from the cluster
  iptables:
    chain: INPUT
    source: "{{item}}"
    protocol: udp
    destination_port: 8302
    jump: ACCEPT
  with_items: '{{cluster_ips}}'

- name: start consul service if not running
  service:
    name: consul
    state: started
  register: consul_started

- name: wait some time for consul election
  local_action: command sleep 15
  when: consul_started.changed

- name: creates acl token for consul servers
  consul_acl:
    mgmt_token: '{{consul_acl_master_token}}'
    name: 'Consul agent access token'
    token: '{{consul_acl_token}}'
    rules:
      - service: ''
        policy: write
      - key: ''
        policy: write

- set_fact:
    advertise_addr: '{{hostvars[inventory_hostname]["ansible_"+advertise_interface.replace("-","_")]["ipv4"]["address"]}}'
  when: advertise_interface is defined

- set_fact:
    advertise_addr: '{{ ansible_default_ipv4["address"] }}'
  when: advertise_interface is not defined

- name: register docker service in the consul cluster
  consul:
    service_name: 'docker'
    service_address: '{{advertise_addr}}'
    service_port: '9999'
    token: '{{consul_acl_token}}'
    state: present
    tags:
    - 'lb_group=primary'
    - 'im'
